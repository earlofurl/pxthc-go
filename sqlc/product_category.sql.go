// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: product_category.sql

package sqlc

import (
	"context"
)

const getProductCategoryByID = `-- name: GetProductCategoryByID :one
SELECT id, name, created_at, updated_at
FROM product_categories
WHERE id = $1
LIMIT 1
`

// description: Get a product category by ID
func (q *Queries) GetProductCategoryByID(ctx context.Context, id int64) (*ProductCategory, error) {
	row := q.db.QueryRowContext(ctx, getProductCategoryByID, id)
	var i ProductCategory
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getProductCategoryByName = `-- name: GetProductCategoryByName :one
SELECT id, name, created_at, updated_at
FROM product_categories
WHERE name ILIKE $1
LIMIT 1
`

// description: Get a product category by name
func (q *Queries) GetProductCategoryByName(ctx context.Context, name string) (*ProductCategory, error) {
	row := q.db.QueryRowContext(ctx, getProductCategoryByName, name)
	var i ProductCategory
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const listProductCategories = `-- name: ListProductCategories :many
SELECT id, name, created_at, updated_at
FROM product_categories
ORDER BY name
`

// description: List all product categories
func (q *Queries) ListProductCategories(ctx context.Context) ([]*ProductCategory, error) {
	rows, err := q.db.QueryContext(ctx, listProductCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*ProductCategory{}
	for rows.Next() {
		var i ProductCategory
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
