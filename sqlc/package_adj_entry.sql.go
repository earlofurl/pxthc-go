// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: package_adj_entry.sql

package sqlc

import (
	"context"

	"github.com/shopspring/decimal"
)

const createPackageAdjEntry = `-- name: CreatePackageAdjEntry :one
INSERT INTO package_adj_entries (package_id,
                                 amount,
                                 uom_id)
VALUES ($1, $2, $3)
RETURNING id, created_at, package_id, amount, uom_id
`

type CreatePackageAdjEntryParams struct {
	PackageID int64           `json:"package_id"`
	Amount    decimal.Decimal `json:"amount"`
	UomID     int64           `json:"uom_id"`
}

// description: Create a package adjustment entry
func (q *Queries) CreatePackageAdjEntry(ctx context.Context, arg *CreatePackageAdjEntryParams) (*PackageAdjEntry, error) {
	row := q.db.QueryRowContext(ctx, createPackageAdjEntry, arg.PackageID, arg.Amount, arg.UomID)
	var i PackageAdjEntry
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.PackageID,
		&i.Amount,
		&i.UomID,
	)
	return &i, err
}

const getPackageAdjEntry = `-- name: GetPackageAdjEntry :one
SELECT id, created_at, package_id, amount, uom_id
FROM package_adj_entries
WHERE id = $1
LIMIT 1
`

// description: Get a package adjustment entry
func (q *Queries) GetPackageAdjEntry(ctx context.Context, id int64) (*PackageAdjEntry, error) {
	row := q.db.QueryRowContext(ctx, getPackageAdjEntry, id)
	var i PackageAdjEntry
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.PackageID,
		&i.Amount,
		&i.UomID,
	)
	return &i, err
}

const listPackageAdjEntries = `-- name: ListPackageAdjEntries :many
SELECT id, created_at, package_id, amount, uom_id
FROM package_adj_entries
WHERE package_id = $1
ORDER BY id
LIMIT $2 OFFSET $3
`

type ListPackageAdjEntriesParams struct {
	PackageID int64 `json:"package_id"`
	Limit     int32 `json:"limit"`
	Offset    int32 `json:"offset"`
}

// description: List package adjustment entries by package id
func (q *Queries) ListPackageAdjEntries(ctx context.Context, arg *ListPackageAdjEntriesParams) ([]*PackageAdjEntry, error) {
	rows, err := q.db.QueryContext(ctx, listPackageAdjEntries, arg.PackageID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*PackageAdjEntry{}
	for rows.Next() {
		var i PackageAdjEntry
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.PackageID,
			&i.Amount,
			&i.UomID,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
