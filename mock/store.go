// Code generated by MockGen. DO NOT EDIT.
// Source: pixel-thc-backend-go/db/sqlc (interfaces: Store)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	db2 "github.com/earlofurl/pxthc/sqlc"
	reflect "reflect"

	nulls "github.com/gobuffalo/nulls"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// AddPackageQuantity mocks base method.
func (m *MockStore) AddPackageQuantity(arg0 context.Context, arg1 db2.AddPackageQuantityParams) (db2.Package, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPackageQuantity", arg0, arg1)
	ret0, _ := ret[0].(db2.Package)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddPackageQuantity indicates an expected call of AddPackageQuantity.
func (mr *MockStoreMockRecorder) AddPackageQuantity(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPackageQuantity", reflect.TypeOf((*MockStore)(nil).AddPackageQuantity), arg0, arg1)
}

// AssignLabTestToPackage mocks base method.
func (m *MockStore) AssignLabTestToPackage(arg0 context.Context, arg1 db2.AssignLabTestToPackageParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignLabTestToPackage", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssignLabTestToPackage indicates an expected call of AssignLabTestToPackage.
func (mr *MockStoreMockRecorder) AssignLabTestToPackage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignLabTestToPackage", reflect.TypeOf((*MockStore)(nil).AssignLabTestToPackage), arg0, arg1)
}

// AssignSourcePackageChildPackage mocks base method.
func (m *MockStore) AssignSourcePackageChildPackage(arg0 context.Context, arg1 db2.AssignSourcePackageChildPackageParams) (db2.SourcePackagesChildPackage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignSourcePackageChildPackage", arg0, arg1)
	ret0, _ := ret[0].(db2.SourcePackagesChildPackage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssignSourcePackageChildPackage indicates an expected call of AssignSourcePackageChildPackage.
func (mr *MockStoreMockRecorder) AssignSourcePackageChildPackage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignSourcePackageChildPackage", reflect.TypeOf((*MockStore)(nil).AssignSourcePackageChildPackage), arg0, arg1)
}

// CreateFacility mocks base method.
func (m *MockStore) CreateFacility(arg0 context.Context, arg1 db2.CreateFacilityParams) (db2.Facility, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFacility", arg0, arg1)
	ret0, _ := ret[0].(db2.Facility)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFacility indicates an expected call of CreateFacility.
func (mr *MockStoreMockRecorder) CreateFacility(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFacility", reflect.TypeOf((*MockStore)(nil).CreateFacility), arg0, arg1)
}

// CreateFacilityLocation mocks base method.
func (m *MockStore) CreateFacilityLocation(arg0 context.Context, arg1 db2.CreateFacilityLocationParams) (db2.FacilityLocation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFacilityLocation", arg0, arg1)
	ret0, _ := ret[0].(db2.FacilityLocation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFacilityLocation indicates an expected call of CreateFacilityLocation.
func (mr *MockStoreMockRecorder) CreateFacilityLocation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFacilityLocation", reflect.TypeOf((*MockStore)(nil).CreateFacilityLocation), arg0, arg1)
}

// CreateItem mocks base method.
func (m *MockStore) CreateItem(arg0 context.Context, arg1 db2.CreateItemParams) (db2.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateItem", arg0, arg1)
	ret0, _ := ret[0].(db2.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateItem indicates an expected call of CreateItem.
func (mr *MockStoreMockRecorder) CreateItem(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateItem", reflect.TypeOf((*MockStore)(nil).CreateItem), arg0, arg1)
}

// CreateItemType mocks base method.
func (m *MockStore) CreateItemType(arg0 context.Context, arg1 db2.CreateItemTypeParams) (db2.ItemType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateItemType", arg0, arg1)
	ret0, _ := ret[0].(db2.ItemType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateItemType indicates an expected call of CreateItemType.
func (mr *MockStoreMockRecorder) CreateItemType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateItemType", reflect.TypeOf((*MockStore)(nil).CreateItemType), arg0, arg1)
}

// CreateLabTest mocks base method.
func (m *MockStore) CreateLabTest(arg0 context.Context, arg1 db2.CreateLabTestParams) (db2.LabTest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLabTest", arg0, arg1)
	ret0, _ := ret[0].(db2.LabTest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLabTest indicates an expected call of CreateLabTest.
func (mr *MockStoreMockRecorder) CreateLabTest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLabTest", reflect.TypeOf((*MockStore)(nil).CreateLabTest), arg0, arg1)
}

// CreateOrder mocks base method.
func (m *MockStore) CreateOrder(arg0 context.Context, arg1 db2.CreateOrderParams) (db2.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", arg0, arg1)
	ret0, _ := ret[0].(db2.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockStoreMockRecorder) CreateOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockStore)(nil).CreateOrder), arg0, arg1)
}

// CreatePackage mocks base method.
func (m *MockStore) CreatePackage(arg0 context.Context, arg1 db2.CreatePackageParams) (db2.Package, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePackage", arg0, arg1)
	ret0, _ := ret[0].(db2.Package)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePackage indicates an expected call of CreatePackage.
func (mr *MockStoreMockRecorder) CreatePackage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePackage", reflect.TypeOf((*MockStore)(nil).CreatePackage), arg0, arg1)
}

// CreatePackageAdjEntry mocks base method.
func (m *MockStore) CreatePackageAdjEntry(arg0 context.Context, arg1 db2.CreatePackageAdjEntryParams) (db2.PackageAdjEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePackageAdjEntry", arg0, arg1)
	ret0, _ := ret[0].(db2.PackageAdjEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePackageAdjEntry indicates an expected call of CreatePackageAdjEntry.
func (mr *MockStoreMockRecorder) CreatePackageAdjEntry(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePackageAdjEntry", reflect.TypeOf((*MockStore)(nil).CreatePackageAdjEntry), arg0, arg1)
}

// CreatePackageAdjustment mocks base method.
func (m *MockStore) CreatePackageAdjustment(arg0 context.Context, arg1 db2.CreatePackageAdjustmentParams) (db2.PackageAdjustment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePackageAdjustment", arg0, arg1)
	ret0, _ := ret[0].(db2.PackageAdjustment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePackageAdjustment indicates an expected call of CreatePackageAdjustment.
func (mr *MockStoreMockRecorder) CreatePackageAdjustment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePackageAdjustment", reflect.TypeOf((*MockStore)(nil).CreatePackageAdjustment), arg0, arg1)
}

// CreatePackageTag mocks base method.
func (m *MockStore) CreatePackageTag(arg0 context.Context, arg1 db2.CreatePackageTagParams) (db2.PackageTag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePackageTag", arg0, arg1)
	ret0, _ := ret[0].(db2.PackageTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePackageTag indicates an expected call of CreatePackageTag.
func (mr *MockStoreMockRecorder) CreatePackageTag(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePackageTag", reflect.TypeOf((*MockStore)(nil).CreatePackageTag), arg0, arg1)
}

// CreatePackageTx mocks base method.
func (m *MockStore) CreatePackageTx(arg0 context.Context, arg1 db2.CreatePackageTxParams) (db2.CreatePackageTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePackageTx", arg0, arg1)
	ret0, _ := ret[0].(db2.CreatePackageTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePackageTx indicates an expected call of CreatePackageTx.
func (mr *MockStoreMockRecorder) CreatePackageTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePackageTx", reflect.TypeOf((*MockStore)(nil).CreatePackageTx), arg0, arg1)
}

// CreatePckgToPckgTx mocks base method.
func (m *MockStore) CreatePckgToPckgTx(arg0 context.Context, arg1 db2.CreatePckgToPckgTxParams) (db2.CreatePckgToPckgTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePckgToPckgTx", arg0, arg1)
	ret0, _ := ret[0].(db2.CreatePckgToPckgTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePckgToPckgTx indicates an expected call of CreatePckgToPckgTx.
func (mr *MockStoreMockRecorder) CreatePckgToPckgTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePckgToPckgTx", reflect.TypeOf((*MockStore)(nil).CreatePckgToPckgTx), arg0, arg1)
}

// CreateProductCategory mocks base method.
func (m *MockStore) CreateProductCategory(arg0 context.Context, arg1 string) (db2.ProductCategory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProductCategory", arg0, arg1)
	ret0, _ := ret[0].(db2.ProductCategory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProductCategory indicates an expected call of CreateProductCategory.
func (mr *MockStoreMockRecorder) CreateProductCategory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProductCategory", reflect.TypeOf((*MockStore)(nil).CreateProductCategory), arg0, arg1)
}

// CreateSession mocks base method.
func (m *MockStore) CreateSession(arg0 context.Context, arg1 db2.CreateSessionParams) (db2.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", arg0, arg1)
	ret0, _ := ret[0].(db2.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockStoreMockRecorder) CreateSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockStore)(nil).CreateSession), arg0, arg1)
}

// CreateStrain mocks base method.
func (m *MockStore) CreateStrain(arg0 context.Context, arg1 db2.CreateStrainParams) (db2.Strain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStrain", arg0, arg1)
	ret0, _ := ret[0].(db2.Strain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStrain indicates an expected call of CreateStrain.
func (mr *MockStoreMockRecorder) CreateStrain(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStrain", reflect.TypeOf((*MockStore)(nil).CreateStrain), arg0, arg1)
}

// CreateUom mocks base method.
func (m *MockStore) CreateUom(arg0 context.Context, arg1 db2.CreateUomParams) (db2.Uom, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUom", arg0, arg1)
	ret0, _ := ret[0].(db2.Uom)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUom indicates an expected call of CreateUom.
func (mr *MockStoreMockRecorder) CreateUom(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUom", reflect.TypeOf((*MockStore)(nil).CreateUom), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockStore) CreateUser(arg0 context.Context, arg1 db2.CreateUserParams) (db2.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(db2.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockStoreMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStore)(nil).CreateUser), arg0, arg1)
}

// CreateUserTx mocks base method.
func (m *MockStore) CreateUserTx(arg0 context.Context, arg1 db2.CreateUserTxParams) (db2.CreateUserTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserTx", arg0, arg1)
	ret0, _ := ret[0].(db2.CreateUserTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserTx indicates an expected call of CreateUserTx.
func (mr *MockStoreMockRecorder) CreateUserTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserTx", reflect.TypeOf((*MockStore)(nil).CreateUserTx), arg0, arg1)
}

// DeleteFacility mocks base method.
func (m *MockStore) DeleteFacility(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFacility", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFacility indicates an expected call of DeleteFacility.
func (mr *MockStoreMockRecorder) DeleteFacility(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFacility", reflect.TypeOf((*MockStore)(nil).DeleteFacility), arg0, arg1)
}

// DeleteFacilityLocation mocks base method.
func (m *MockStore) DeleteFacilityLocation(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFacilityLocation", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFacilityLocation indicates an expected call of DeleteFacilityLocation.
func (mr *MockStoreMockRecorder) DeleteFacilityLocation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFacilityLocation", reflect.TypeOf((*MockStore)(nil).DeleteFacilityLocation), arg0, arg1)
}

// DeleteItem mocks base method.
func (m *MockStore) DeleteItem(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteItem", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteItem indicates an expected call of DeleteItem.
func (mr *MockStoreMockRecorder) DeleteItem(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteItem", reflect.TypeOf((*MockStore)(nil).DeleteItem), arg0, arg1)
}

// DeleteItemType mocks base method.
func (m *MockStore) DeleteItemType(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteItemType", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteItemType indicates an expected call of DeleteItemType.
func (mr *MockStoreMockRecorder) DeleteItemType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteItemType", reflect.TypeOf((*MockStore)(nil).DeleteItemType), arg0, arg1)
}

// DeleteLabTest mocks base method.
func (m *MockStore) DeleteLabTest(arg0 context.Context, arg1 nulls.Int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLabTest", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLabTest indicates an expected call of DeleteLabTest.
func (mr *MockStoreMockRecorder) DeleteLabTest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLabTest", reflect.TypeOf((*MockStore)(nil).DeleteLabTest), arg0, arg1)
}

// DeleteOrder mocks base method.
func (m *MockStore) DeleteOrder(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrder", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOrder indicates an expected call of DeleteOrder.
func (mr *MockStoreMockRecorder) DeleteOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrder", reflect.TypeOf((*MockStore)(nil).DeleteOrder), arg0, arg1)
}

// DeletePackage mocks base method.
func (m *MockStore) DeletePackage(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePackage", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePackage indicates an expected call of DeletePackage.
func (mr *MockStoreMockRecorder) DeletePackage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePackage", reflect.TypeOf((*MockStore)(nil).DeletePackage), arg0, arg1)
}

// DeleteProductCategory mocks base method.
func (m *MockStore) DeleteProductCategory(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProductCategory", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProductCategory indicates an expected call of DeleteProductCategory.
func (mr *MockStoreMockRecorder) DeleteProductCategory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProductCategory", reflect.TypeOf((*MockStore)(nil).DeleteProductCategory), arg0, arg1)
}

// DeleteStrain mocks base method.
func (m *MockStore) DeleteStrain(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStrain", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteStrain indicates an expected call of DeleteStrain.
func (mr *MockStoreMockRecorder) DeleteStrain(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStrain", reflect.TypeOf((*MockStore)(nil).DeleteStrain), arg0, arg1)
}

// GetFacility mocks base method.
func (m *MockStore) GetFacility(arg0 context.Context, arg1 int64) (db2.Facility, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFacility", arg0, arg1)
	ret0, _ := ret[0].(db2.Facility)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFacility indicates an expected call of GetFacility.
func (mr *MockStoreMockRecorder) GetFacility(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFacility", reflect.TypeOf((*MockStore)(nil).GetFacility), arg0, arg1)
}

// GetFacilityLocation mocks base method.
func (m *MockStore) GetFacilityLocation(arg0 context.Context, arg1 int64) (db2.FacilityLocation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFacilityLocation", arg0, arg1)
	ret0, _ := ret[0].(db2.FacilityLocation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFacilityLocation indicates an expected call of GetFacilityLocation.
func (mr *MockStoreMockRecorder) GetFacilityLocation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFacilityLocation", reflect.TypeOf((*MockStore)(nil).GetFacilityLocation), arg0, arg1)
}

// GetItem mocks base method.
func (m *MockStore) GetItem(arg0 context.Context, arg1 int64) (db2.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItem", arg0, arg1)
	ret0, _ := ret[0].(db2.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItem indicates an expected call of GetItem.
func (mr *MockStoreMockRecorder) GetItem(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItem", reflect.TypeOf((*MockStore)(nil).GetItem), arg0, arg1)
}

// GetItemType mocks base method.
func (m *MockStore) GetItemType(arg0 context.Context, arg1 int64) (db2.ItemType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItemType", arg0, arg1)
	ret0, _ := ret[0].(db2.ItemType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItemType indicates an expected call of GetItemType.
func (mr *MockStoreMockRecorder) GetItemType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItemType", reflect.TypeOf((*MockStore)(nil).GetItemType), arg0, arg1)
}

// GetLabTest mocks base method.
func (m *MockStore) GetLabTest(arg0 context.Context, arg1 nulls.Int64) (db2.LabTest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLabTest", arg0, arg1)
	ret0, _ := ret[0].(db2.LabTest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLabTest indicates an expected call of GetLabTest.
func (mr *MockStoreMockRecorder) GetLabTest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLabTest", reflect.TypeOf((*MockStore)(nil).GetLabTest), arg0, arg1)
}

// GetLabTestByPackageID mocks base method.
func (m *MockStore) GetLabTestByPackageID(arg0 context.Context, arg1 int64) (db2.LabTestsPackage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLabTestByPackageID", arg0, arg1)
	ret0, _ := ret[0].(db2.LabTestsPackage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLabTestByPackageID indicates an expected call of GetLabTestByPackageID.
func (mr *MockStoreMockRecorder) GetLabTestByPackageID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLabTestByPackageID", reflect.TypeOf((*MockStore)(nil).GetLabTestByPackageID), arg0, arg1)
}

// GetOrder mocks base method.
func (m *MockStore) GetOrder(arg0 context.Context, arg1 int64) (db2.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrder", arg0, arg1)
	ret0, _ := ret[0].(db2.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrder indicates an expected call of GetOrder.
func (mr *MockStoreMockRecorder) GetOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrder", reflect.TypeOf((*MockStore)(nil).GetOrder), arg0, arg1)
}

// GetPackage mocks base method.
func (m *MockStore) GetPackage(arg0 context.Context, arg1 int64) (db2.Package, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPackage", arg0, arg1)
	ret0, _ := ret[0].(db2.Package)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPackage indicates an expected call of GetPackage.
func (mr *MockStoreMockRecorder) GetPackage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPackage", reflect.TypeOf((*MockStore)(nil).GetPackage), arg0, arg1)
}

// GetPackageAdjEntry mocks base method.
func (m *MockStore) GetPackageAdjEntry(arg0 context.Context, arg1 int64) (db2.PackageAdjEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPackageAdjEntry", arg0, arg1)
	ret0, _ := ret[0].(db2.PackageAdjEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPackageAdjEntry indicates an expected call of GetPackageAdjEntry.
func (mr *MockStoreMockRecorder) GetPackageAdjEntry(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPackageAdjEntry", reflect.TypeOf((*MockStore)(nil).GetPackageAdjEntry), arg0, arg1)
}

// GetPackageAdjustment mocks base method.
func (m *MockStore) GetPackageAdjustment(arg0 context.Context, arg1 int64) (db2.PackageAdjustment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPackageAdjustment", arg0, arg1)
	ret0, _ := ret[0].(db2.PackageAdjustment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPackageAdjustment indicates an expected call of GetPackageAdjustment.
func (mr *MockStoreMockRecorder) GetPackageAdjustment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPackageAdjustment", reflect.TypeOf((*MockStore)(nil).GetPackageAdjustment), arg0, arg1)
}

// GetPackageByTagID mocks base method.
func (m *MockStore) GetPackageByTagID(arg0 context.Context, arg1 nulls.Int64) (db2.Package, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPackageByTagID", arg0, arg1)
	ret0, _ := ret[0].(db2.Package)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPackageByTagID indicates an expected call of GetPackageByTagID.
func (mr *MockStoreMockRecorder) GetPackageByTagID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPackageByTagID", reflect.TypeOf((*MockStore)(nil).GetPackageByTagID), arg0, arg1)
}

// GetPackageTag mocks base method.
func (m *MockStore) GetPackageTag(arg0 context.Context, arg1 int64) (db2.PackageTag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPackageTag", arg0, arg1)
	ret0, _ := ret[0].(db2.PackageTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPackageTag indicates an expected call of GetPackageTag.
func (mr *MockStoreMockRecorder) GetPackageTag(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPackageTag", reflect.TypeOf((*MockStore)(nil).GetPackageTag), arg0, arg1)
}

// GetPackageTagByTagNumber mocks base method.
func (m *MockStore) GetPackageTagByTagNumber(arg0 context.Context, arg1 string) (db2.PackageTag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPackageTagByTagNumber", arg0, arg1)
	ret0, _ := ret[0].(db2.PackageTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPackageTagByTagNumber indicates an expected call of GetPackageTagByTagNumber.
func (mr *MockStoreMockRecorder) GetPackageTagByTagNumber(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPackageTagByTagNumber", reflect.TypeOf((*MockStore)(nil).GetPackageTagByTagNumber), arg0, arg1)
}

// GetProductCategory mocks base method.
func (m *MockStore) GetProductCategory(arg0 context.Context, arg1 int64) (db2.ProductCategory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductCategory", arg0, arg1)
	ret0, _ := ret[0].(db2.ProductCategory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductCategory indicates an expected call of GetProductCategory.
func (mr *MockStoreMockRecorder) GetProductCategory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductCategory", reflect.TypeOf((*MockStore)(nil).GetProductCategory), arg0, arg1)
}

// GetProductCategoryByName mocks base method.
func (m *MockStore) GetProductCategoryByName(arg0 context.Context, arg1 string) (db2.ProductCategory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductCategoryByName", arg0, arg1)
	ret0, _ := ret[0].(db2.ProductCategory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductCategoryByName indicates an expected call of GetProductCategoryByName.
func (mr *MockStoreMockRecorder) GetProductCategoryByName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductCategoryByName", reflect.TypeOf((*MockStore)(nil).GetProductCategoryByName), arg0, arg1)
}

// GetSession mocks base method.
func (m *MockStore) GetSession(arg0 context.Context, arg1 uuid.UUID) (db2.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSession", arg0, arg1)
	ret0, _ := ret[0].(db2.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSession indicates an expected call of GetSession.
func (mr *MockStoreMockRecorder) GetSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSession", reflect.TypeOf((*MockStore)(nil).GetSession), arg0, arg1)
}

// GetStrain mocks base method.
func (m *MockStore) GetStrain(arg0 context.Context, arg1 int64) (db2.Strain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStrain", arg0, arg1)
	ret0, _ := ret[0].(db2.Strain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStrain indicates an expected call of GetStrain.
func (mr *MockStoreMockRecorder) GetStrain(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStrain", reflect.TypeOf((*MockStore)(nil).GetStrain), arg0, arg1)
}

// GetUom mocks base method.
func (m *MockStore) GetUom(arg0 context.Context, arg1 int64) (db2.Uom, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUom", arg0, arg1)
	ret0, _ := ret[0].(db2.Uom)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUom indicates an expected call of GetUom.
func (mr *MockStoreMockRecorder) GetUom(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUom", reflect.TypeOf((*MockStore)(nil).GetUom), arg0, arg1)
}

// GetUomByName mocks base method.
func (m *MockStore) GetUomByName(arg0 context.Context, arg1 string) (db2.Uom, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUomByName", arg0, arg1)
	ret0, _ := ret[0].(db2.Uom)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUomByName indicates an expected call of GetUomByName.
func (mr *MockStoreMockRecorder) GetUomByName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUomByName", reflect.TypeOf((*MockStore)(nil).GetUomByName), arg0, arg1)
}

// GetUser mocks base method.
func (m *MockStore) GetUser(arg0 context.Context, arg1 string) (db2.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(db2.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockStoreMockRecorder) GetUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockStore)(nil).GetUser), arg0, arg1)
}

// ListActivePackages mocks base method.
func (m *MockStore) ListActivePackages(arg0 context.Context) ([]db2.ListActivePackagesRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListActivePackages", arg0)
	ret0, _ := ret[0].([]db2.ListActivePackagesRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListActivePackages indicates an expected call of ListActivePackages.
func (mr *MockStoreMockRecorder) ListActivePackages(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListActivePackages", reflect.TypeOf((*MockStore)(nil).ListActivePackages), arg0)
}

// ListFacilities mocks base method.
func (m *MockStore) ListFacilities(arg0 context.Context) ([]db2.Facility, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFacilities", arg0)
	ret0, _ := ret[0].([]db2.Facility)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFacilities indicates an expected call of ListFacilities.
func (mr *MockStoreMockRecorder) ListFacilities(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFacilities", reflect.TypeOf((*MockStore)(nil).ListFacilities), arg0)
}

// ListFacilityLocations mocks base method.
func (m *MockStore) ListFacilityLocations(arg0 context.Context) ([]db2.FacilityLocation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFacilityLocations", arg0)
	ret0, _ := ret[0].([]db2.FacilityLocation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFacilityLocations indicates an expected call of ListFacilityLocations.
func (mr *MockStoreMockRecorder) ListFacilityLocations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFacilityLocations", reflect.TypeOf((*MockStore)(nil).ListFacilityLocations), arg0)
}

// ListFacilityLocationsByFacility mocks base method.
func (m *MockStore) ListFacilityLocationsByFacility(arg0 context.Context, arg1 int64) ([]db2.FacilityLocation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFacilityLocationsByFacility", arg0, arg1)
	ret0, _ := ret[0].([]db2.FacilityLocation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFacilityLocationsByFacility indicates an expected call of ListFacilityLocationsByFacility.
func (mr *MockStoreMockRecorder) ListFacilityLocationsByFacility(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFacilityLocationsByFacility", reflect.TypeOf((*MockStore)(nil).ListFacilityLocationsByFacility), arg0, arg1)
}

// ListItemTypes mocks base method.
func (m *MockStore) ListItemTypes(arg0 context.Context) ([]db2.ItemType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListItemTypes", arg0)
	ret0, _ := ret[0].([]db2.ItemType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListItemTypes indicates an expected call of ListItemTypes.
func (mr *MockStoreMockRecorder) ListItemTypes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListItemTypes", reflect.TypeOf((*MockStore)(nil).ListItemTypes), arg0)
}

// ListItems mocks base method.
func (m *MockStore) ListItems(arg0 context.Context) ([]db2.ListItemsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListItems", arg0)
	ret0, _ := ret[0].([]db2.ListItemsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListItems indicates an expected call of ListItems.
func (mr *MockStoreMockRecorder) ListItems(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListItems", reflect.TypeOf((*MockStore)(nil).ListItems), arg0)
}

// ListLabTests mocks base method.
func (m *MockStore) ListLabTests(arg0 context.Context) ([]db2.LabTest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLabTests", arg0)
	ret0, _ := ret[0].([]db2.LabTest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLabTests indicates an expected call of ListLabTests.
func (mr *MockStoreMockRecorder) ListLabTests(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLabTests", reflect.TypeOf((*MockStore)(nil).ListLabTests), arg0)
}

// ListOrders mocks base method.
func (m *MockStore) ListOrders(arg0 context.Context) ([]db2.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrders", arg0)
	ret0, _ := ret[0].([]db2.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOrders indicates an expected call of ListOrders.
func (mr *MockStoreMockRecorder) ListOrders(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrders", reflect.TypeOf((*MockStore)(nil).ListOrders), arg0)
}

// ListPackageAdjEntries mocks base method.
func (m *MockStore) ListPackageAdjEntries(arg0 context.Context, arg1 db2.ListPackageAdjEntriesParams) ([]db2.PackageAdjEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPackageAdjEntries", arg0, arg1)
	ret0, _ := ret[0].([]db2.PackageAdjEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPackageAdjEntries indicates an expected call of ListPackageAdjEntries.
func (mr *MockStoreMockRecorder) ListPackageAdjEntries(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPackageAdjEntries", reflect.TypeOf((*MockStore)(nil).ListPackageAdjEntries), arg0, arg1)
}

// ListPackageAdjustments mocks base method.
func (m *MockStore) ListPackageAdjustments(arg0 context.Context, arg1 db2.ListPackageAdjustmentsParams) ([]db2.PackageAdjustment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPackageAdjustments", arg0, arg1)
	ret0, _ := ret[0].([]db2.PackageAdjustment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPackageAdjustments indicates an expected call of ListPackageAdjustments.
func (mr *MockStoreMockRecorder) ListPackageAdjustments(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPackageAdjustments", reflect.TypeOf((*MockStore)(nil).ListPackageAdjustments), arg0, arg1)
}

// ListPackageTags mocks base method.
func (m *MockStore) ListPackageTags(arg0 context.Context, arg1 db2.ListPackageTagsParams) ([]db2.PackageTag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPackageTags", arg0, arg1)
	ret0, _ := ret[0].([]db2.PackageTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPackageTags indicates an expected call of ListPackageTags.
func (mr *MockStoreMockRecorder) ListPackageTags(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPackageTags", reflect.TypeOf((*MockStore)(nil).ListPackageTags), arg0, arg1)
}

// ListPackages mocks base method.
func (m *MockStore) ListPackages(arg0 context.Context) ([]db2.ListPackagesRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPackages", arg0)
	ret0, _ := ret[0].([]db2.ListPackagesRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPackages indicates an expected call of ListPackages.
func (mr *MockStoreMockRecorder) ListPackages(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPackages", reflect.TypeOf((*MockStore)(nil).ListPackages), arg0)
}

// ListProductCategories mocks base method.
func (m *MockStore) ListProductCategories(arg0 context.Context) ([]db2.ProductCategory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProductCategories", arg0)
	ret0, _ := ret[0].([]db2.ProductCategory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProductCategories indicates an expected call of ListProductCategories.
func (mr *MockStoreMockRecorder) ListProductCategories(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProductCategories", reflect.TypeOf((*MockStore)(nil).ListProductCategories), arg0)
}

// ListStrains mocks base method.
func (m *MockStore) ListStrains(arg0 context.Context) ([]db2.Strain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStrains", arg0)
	ret0, _ := ret[0].([]db2.Strain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStrains indicates an expected call of ListStrains.
func (mr *MockStoreMockRecorder) ListStrains(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStrains", reflect.TypeOf((*MockStore)(nil).ListStrains), arg0)
}

// ListUoms mocks base method.
func (m *MockStore) ListUoms(arg0 context.Context) ([]db2.Uom, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUoms", arg0)
	ret0, _ := ret[0].([]db2.Uom)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUoms indicates an expected call of ListUoms.
func (mr *MockStoreMockRecorder) ListUoms(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUoms", reflect.TypeOf((*MockStore)(nil).ListUoms), arg0)
}

// SubtractPackageQuantity mocks base method.
func (m *MockStore) SubtractPackageQuantity(arg0 context.Context, arg1 db2.SubtractPackageQuantityParams) (db2.Package, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubtractPackageQuantity", arg0, arg1)
	ret0, _ := ret[0].(db2.Package)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubtractPackageQuantity indicates an expected call of SubtractPackageQuantity.
func (mr *MockStoreMockRecorder) SubtractPackageQuantity(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubtractPackageQuantity", reflect.TypeOf((*MockStore)(nil).SubtractPackageQuantity), arg0, arg1)
}

// UpdateFacility mocks base method.
func (m *MockStore) UpdateFacility(arg0 context.Context, arg1 db2.UpdateFacilityParams) (db2.Facility, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFacility", arg0, arg1)
	ret0, _ := ret[0].(db2.Facility)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFacility indicates an expected call of UpdateFacility.
func (mr *MockStoreMockRecorder) UpdateFacility(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFacility", reflect.TypeOf((*MockStore)(nil).UpdateFacility), arg0, arg1)
}

// UpdateFacilityLocation mocks base method.
func (m *MockStore) UpdateFacilityLocation(arg0 context.Context, arg1 db2.UpdateFacilityLocationParams) (db2.FacilityLocation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFacilityLocation", arg0, arg1)
	ret0, _ := ret[0].(db2.FacilityLocation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFacilityLocation indicates an expected call of UpdateFacilityLocation.
func (mr *MockStoreMockRecorder) UpdateFacilityLocation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFacilityLocation", reflect.TypeOf((*MockStore)(nil).UpdateFacilityLocation), arg0, arg1)
}

// UpdateItem mocks base method.
func (m *MockStore) UpdateItem(arg0 context.Context, arg1 db2.UpdateItemParams) (db2.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateItem", arg0, arg1)
	ret0, _ := ret[0].(db2.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateItem indicates an expected call of UpdateItem.
func (mr *MockStoreMockRecorder) UpdateItem(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateItem", reflect.TypeOf((*MockStore)(nil).UpdateItem), arg0, arg1)
}

// UpdateItemType mocks base method.
func (m *MockStore) UpdateItemType(arg0 context.Context, arg1 db2.UpdateItemTypeParams) (db2.ItemType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateItemType", arg0, arg1)
	ret0, _ := ret[0].(db2.ItemType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateItemType indicates an expected call of UpdateItemType.
func (mr *MockStoreMockRecorder) UpdateItemType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateItemType", reflect.TypeOf((*MockStore)(nil).UpdateItemType), arg0, arg1)
}

// UpdateLabTest mocks base method.
func (m *MockStore) UpdateLabTest(arg0 context.Context, arg1 db2.UpdateLabTestParams) (db2.LabTest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLabTest", arg0, arg1)
	ret0, _ := ret[0].(db2.LabTest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLabTest indicates an expected call of UpdateLabTest.
func (mr *MockStoreMockRecorder) UpdateLabTest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLabTest", reflect.TypeOf((*MockStore)(nil).UpdateLabTest), arg0, arg1)
}

// UpdateOrder mocks base method.
func (m *MockStore) UpdateOrder(arg0 context.Context, arg1 db2.UpdateOrderParams) (db2.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrder", arg0, arg1)
	ret0, _ := ret[0].(db2.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrder indicates an expected call of UpdateOrder.
func (mr *MockStoreMockRecorder) UpdateOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrder", reflect.TypeOf((*MockStore)(nil).UpdateOrder), arg0, arg1)
}

// UpdatePackage mocks base method.
func (m *MockStore) UpdatePackage(arg0 context.Context, arg1 db2.UpdatePackageParams) (db2.Package, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePackage", arg0, arg1)
	ret0, _ := ret[0].(db2.Package)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePackage indicates an expected call of UpdatePackage.
func (mr *MockStoreMockRecorder) UpdatePackage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePackage", reflect.TypeOf((*MockStore)(nil).UpdatePackage), arg0, arg1)
}

// UpdatePackageTag mocks base method.
func (m *MockStore) UpdatePackageTag(arg0 context.Context, arg1 db2.UpdatePackageTagParams) (db2.PackageTag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePackageTag", arg0, arg1)
	ret0, _ := ret[0].(db2.PackageTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePackageTag indicates an expected call of UpdatePackageTag.
func (mr *MockStoreMockRecorder) UpdatePackageTag(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePackageTag", reflect.TypeOf((*MockStore)(nil).UpdatePackageTag), arg0, arg1)
}

// UpdateProductCategory mocks base method.
func (m *MockStore) UpdateProductCategory(arg0 context.Context, arg1 db2.UpdateProductCategoryParams) (db2.ProductCategory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProductCategory", arg0, arg1)
	ret0, _ := ret[0].(db2.ProductCategory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProductCategory indicates an expected call of UpdateProductCategory.
func (mr *MockStoreMockRecorder) UpdateProductCategory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProductCategory", reflect.TypeOf((*MockStore)(nil).UpdateProductCategory), arg0, arg1)
}

// UpdateStrain mocks base method.
func (m *MockStore) UpdateStrain(arg0 context.Context, arg1 db2.UpdateStrainParams) (db2.Strain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStrain", arg0, arg1)
	ret0, _ := ret[0].(db2.Strain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStrain indicates an expected call of UpdateStrain.
func (mr *MockStoreMockRecorder) UpdateStrain(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStrain", reflect.TypeOf((*MockStore)(nil).UpdateStrain), arg0, arg1)
}

// UpdateUser mocks base method.
func (m *MockStore) UpdateUser(arg0 context.Context, arg1 db2.UpdateUserParams) (db2.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0, arg1)
	ret0, _ := ret[0].(db2.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockStoreMockRecorder) UpdateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockStore)(nil).UpdateUser), arg0, arg1)
}
