// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: uom.sql

package sqlc

import (
	"context"
)

const createUom = `-- name: CreateUom :one
INSERT INTO uoms (name, abbreviation)
VALUES ($1, $2)
RETURNING id, created_at, updated_at, name, abbreviation
`

type CreateUomParams struct {
	Name         string `json:"name"`
	Abbreviation string `json:"abbreviation"`
}

// description: Create a new UOM
func (q *Queries) CreateUom(ctx context.Context, arg *CreateUomParams) (*Uom, error) {
	row := q.db.QueryRowContext(ctx, createUom, arg.Name, arg.Abbreviation)
	var i Uom
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Abbreviation,
	)
	return &i, err
}

const getUomByID = `-- name: GetUomByID :one
SELECT id, created_at, updated_at, name, abbreviation
FROM uoms
WHERE id = $1
LIMIT 1
`

// description: Get a UOM by ID
func (q *Queries) GetUomByID(ctx context.Context, id int64) (*Uom, error) {
	row := q.db.QueryRowContext(ctx, getUomByID, id)
	var i Uom
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Abbreviation,
	)
	return &i, err
}

const getUomByName = `-- name: GetUomByName :one
SELECT id, created_at, updated_at, name, abbreviation
FROM uoms
WHERE name ILIKE $1
LIMIT 1
`

// description: Get a UOM by name
func (q *Queries) GetUomByName(ctx context.Context, name string) (*Uom, error) {
	row := q.db.QueryRowContext(ctx, getUomByName, name)
	var i Uom
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Abbreviation,
	)
	return &i, err
}

const listUoms = `-- name: ListUoms :many
SELECT id, created_at, updated_at, name, abbreviation
FROM uoms
ORDER BY name
`

// description: List all UOMs
func (q *Queries) ListUoms(ctx context.Context) ([]*Uom, error) {
	rows, err := q.db.QueryContext(ctx, listUoms)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Uom{}
	for rows.Next() {
		var i Uom
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Abbreviation,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
