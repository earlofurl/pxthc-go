// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: order.sql

package sqlc

import (
	"context"
	"time"

	"github.com/gobuffalo/nulls"
	"github.com/shopspring/decimal"
)

const createOrder = `-- name: CreateOrder :one
INSERT INTO orders (scheduled_pack_date_time, scheduled_ship_date_time, scheduled_delivery_date_time,
                    actual_pack_date_time, actual_ship_date_time, actual_delivery_date_time, order_total, notes, status,
                    customer_name)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
RETURNING id, created_at, updated_at, scheduled_pack_date_time, scheduled_ship_date_time, scheduled_delivery_date_time, actual_pack_date_time, actual_ship_date_time, actual_delivery_date_time, order_total, notes, status, customer_name
`

type CreateOrderParams struct {
	ScheduledPackDateTime     time.Time       `json:"scheduled_pack_date_time"`
	ScheduledShipDateTime     time.Time       `json:"scheduled_ship_date_time"`
	ScheduledDeliveryDateTime time.Time       `json:"scheduled_delivery_date_time"`
	ActualPackDateTime        nulls.Time      `json:"actual_pack_date_time"`
	ActualShipDateTime        nulls.Time      `json:"actual_ship_date_time"`
	ActualDeliveryDateTime    nulls.Time      `json:"actual_delivery_date_time"`
	OrderTotal                decimal.Decimal `json:"order_total"`
	Notes                     string          `json:"notes"`
	Status                    string          `json:"status"`
	CustomerName              string          `json:"customer_name"`
}

// description: Create a new order
func (q *Queries) CreateOrder(ctx context.Context, arg *CreateOrderParams) (*Order, error) {
	row := q.db.QueryRowContext(ctx, createOrder,
		arg.ScheduledPackDateTime,
		arg.ScheduledShipDateTime,
		arg.ScheduledDeliveryDateTime,
		arg.ActualPackDateTime,
		arg.ActualShipDateTime,
		arg.ActualDeliveryDateTime,
		arg.OrderTotal,
		arg.Notes,
		arg.Status,
		arg.CustomerName,
	)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ScheduledPackDateTime,
		&i.ScheduledShipDateTime,
		&i.ScheduledDeliveryDateTime,
		&i.ActualPackDateTime,
		&i.ActualShipDateTime,
		&i.ActualDeliveryDateTime,
		&i.OrderTotal,
		&i.Notes,
		&i.Status,
		&i.CustomerName,
	)
	return &i, err
}

const deleteOrder = `-- name: DeleteOrder :exec
DELETE
FROM orders
WHERE id = $1
`

// description: Delete a single order by id
func (q *Queries) DeleteOrder(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteOrder, id)
	return err
}

const getOrder = `-- name: GetOrder :one
SELECT id, created_at, updated_at, scheduled_pack_date_time, scheduled_ship_date_time, scheduled_delivery_date_time, actual_pack_date_time, actual_ship_date_time, actual_delivery_date_time, order_total, notes, status, customer_name
FROM orders
WHERE id = $1
LIMIT 1
`

// description: Get a single order by id
func (q *Queries) GetOrder(ctx context.Context, id int64) (*Order, error) {
	row := q.db.QueryRowContext(ctx, getOrder, id)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ScheduledPackDateTime,
		&i.ScheduledShipDateTime,
		&i.ScheduledDeliveryDateTime,
		&i.ActualPackDateTime,
		&i.ActualShipDateTime,
		&i.ActualDeliveryDateTime,
		&i.OrderTotal,
		&i.Notes,
		&i.Status,
		&i.CustomerName,
	)
	return &i, err
}

const listOrders = `-- name: ListOrders :many
SELECT id, created_at, updated_at, scheduled_pack_date_time, scheduled_ship_date_time, scheduled_delivery_date_time, actual_pack_date_time, actual_ship_date_time, actual_delivery_date_time, order_total, notes, status, customer_name
FROM orders
ORDER BY created_at DESC
`

// description: List all orders
func (q *Queries) ListOrders(ctx context.Context) ([]*Order, error) {
	rows, err := q.db.QueryContext(ctx, listOrders)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Order{}
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ScheduledPackDateTime,
			&i.ScheduledShipDateTime,
			&i.ScheduledDeliveryDateTime,
			&i.ActualPackDateTime,
			&i.ActualShipDateTime,
			&i.ActualDeliveryDateTime,
			&i.OrderTotal,
			&i.Notes,
			&i.Status,
			&i.CustomerName,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrder = `-- name: UpdateOrder :one
UPDATE orders
SET scheduled_pack_date_time     = COALESCE($1, scheduled_pack_date_time),
    scheduled_ship_date_time     = COALESCE($2, scheduled_ship_date_time),
    scheduled_delivery_date_time = COALESCE($3, scheduled_delivery_date_time),
    actual_pack_date_time        = COALESCE($4, actual_pack_date_time),
    actual_ship_date_time        = COALESCE($5, actual_ship_date_time),
    actual_delivery_date_time    = COALESCE($6, actual_delivery_date_time),
    order_total                  = COALESCE($7, order_total),
    notes                        = COALESCE($8, notes),
    status                       = COALESCE($9, status),
    customer_name                = COALESCE($10, customer_name),
    updated_at                   = NOW()
WHERE id = $11
RETURNING id, created_at, updated_at, scheduled_pack_date_time, scheduled_ship_date_time, scheduled_delivery_date_time, actual_pack_date_time, actual_ship_date_time, actual_delivery_date_time, order_total, notes, status, customer_name
`

type UpdateOrderParams struct {
	ScheduledPackDateTime     nulls.Time          `json:"scheduled_pack_date_time"`
	ScheduledShipDateTime     nulls.Time          `json:"scheduled_ship_date_time"`
	ScheduledDeliveryDateTime nulls.Time          `json:"scheduled_delivery_date_time"`
	ActualPackDateTime        nulls.Time          `json:"actual_pack_date_time"`
	ActualShipDateTime        nulls.Time          `json:"actual_ship_date_time"`
	ActualDeliveryDateTime    nulls.Time          `json:"actual_delivery_date_time"`
	OrderTotal                decimal.NullDecimal `json:"order_total"`
	Notes                     nulls.String        `json:"notes"`
	Status                    nulls.String        `json:"status"`
	CustomerName              nulls.String        `json:"customer_name"`
	ID                        int64               `json:"id"`
}

// description: Update a single order by id
func (q *Queries) UpdateOrder(ctx context.Context, arg *UpdateOrderParams) (*Order, error) {
	row := q.db.QueryRowContext(ctx, updateOrder,
		arg.ScheduledPackDateTime,
		arg.ScheduledShipDateTime,
		arg.ScheduledDeliveryDateTime,
		arg.ActualPackDateTime,
		arg.ActualShipDateTime,
		arg.ActualDeliveryDateTime,
		arg.OrderTotal,
		arg.Notes,
		arg.Status,
		arg.CustomerName,
		arg.ID,
	)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ScheduledPackDateTime,
		&i.ScheduledShipDateTime,
		&i.ScheduledDeliveryDateTime,
		&i.ActualPackDateTime,
		&i.ActualShipDateTime,
		&i.ActualDeliveryDateTime,
		&i.OrderTotal,
		&i.Notes,
		&i.Status,
		&i.CustomerName,
	)
	return &i, err
}
