// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: strain.sql

package sqlc

import (
	"context"

	"github.com/gobuffalo/nulls"
	"github.com/shopspring/decimal"
)

const createStrain = `-- name: CreateStrain :one
INSERT INTO strains (name,
                     type,
                     yield_average,
                     terp_average_total,
                     terp_1,
                     terp_1_value,
                     terp_2,
                     terp_2_value,
                     terp_3,
                     terp_3_value,
                     terp_4,
                     terp_4_value,
                     terp_5,
                     terp_5_value,
                     thc_average,
                     total_cannabinoid_average,
                     light_dep_2022,
                     fall_harvest_2022,
                     quantity_available)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19)
RETURNING id, created_at, updated_at, name, type, yield_average, terp_average_total, terp_1, terp_1_value, terp_2, terp_2_value, terp_3, terp_3_value, terp_4, terp_4_value, terp_5, terp_5_value, thc_average, total_cannabinoid_average, light_dep_2022, fall_harvest_2022, quantity_available
`

type CreateStrainParams struct {
	Name                    string              `json:"name"`
	Type                    string              `json:"type"`
	YieldAverage            decimal.NullDecimal `json:"yield_average"`
	TerpAverageTotal        decimal.NullDecimal `json:"terp_average_total"`
	Terp1                   nulls.String        `json:"terp_1"`
	Terp1Value              decimal.NullDecimal `json:"terp_1_value"`
	Terp2                   nulls.String        `json:"terp_2"`
	Terp2Value              decimal.NullDecimal `json:"terp_2_value"`
	Terp3                   nulls.String        `json:"terp_3"`
	Terp3Value              decimal.NullDecimal `json:"terp_3_value"`
	Terp4                   nulls.String        `json:"terp_4"`
	Terp4Value              decimal.NullDecimal `json:"terp_4_value"`
	Terp5                   nulls.String        `json:"terp_5"`
	Terp5Value              decimal.NullDecimal `json:"terp_5_value"`
	ThcAverage              decimal.NullDecimal `json:"thc_average"`
	TotalCannabinoidAverage decimal.NullDecimal `json:"total_cannabinoid_average"`
	LightDep2022            string              `json:"light_dep_2022"`
	FallHarvest2022         string              `json:"fall_harvest_2022"`
	QuantityAvailable       decimal.Decimal     `json:"quantity_available"`
}

// description: Create a strain
func (q *Queries) CreateStrain(ctx context.Context, arg *CreateStrainParams) (*Strain, error) {
	row := q.db.QueryRowContext(ctx, createStrain,
		arg.Name,
		arg.Type,
		arg.YieldAverage,
		arg.TerpAverageTotal,
		arg.Terp1,
		arg.Terp1Value,
		arg.Terp2,
		arg.Terp2Value,
		arg.Terp3,
		arg.Terp3Value,
		arg.Terp4,
		arg.Terp4Value,
		arg.Terp5,
		arg.Terp5Value,
		arg.ThcAverage,
		arg.TotalCannabinoidAverage,
		arg.LightDep2022,
		arg.FallHarvest2022,
		arg.QuantityAvailable,
	)
	var i Strain
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Type,
		&i.YieldAverage,
		&i.TerpAverageTotal,
		&i.Terp1,
		&i.Terp1Value,
		&i.Terp2,
		&i.Terp2Value,
		&i.Terp3,
		&i.Terp3Value,
		&i.Terp4,
		&i.Terp4Value,
		&i.Terp5,
		&i.Terp5Value,
		&i.ThcAverage,
		&i.TotalCannabinoidAverage,
		&i.LightDep2022,
		&i.FallHarvest2022,
		&i.QuantityAvailable,
	)
	return &i, err
}

const deleteStrain = `-- name: DeleteStrain :exec
DELETE
FROM strains
WHERE id = $1
`

// description: Delete a strain by ID
func (q *Queries) DeleteStrain(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteStrain, id)
	return err
}

const getStrainByID = `-- name: GetStrainByID :one
SELECT id, created_at, updated_at, name, type, yield_average, terp_average_total, terp_1, terp_1_value, terp_2, terp_2_value, terp_3, terp_3_value, terp_4, terp_4_value, terp_5, terp_5_value, thc_average, total_cannabinoid_average, light_dep_2022, fall_harvest_2022, quantity_available
FROM strains
WHERE id = $1
LIMIT 1
`

// description: Get a strain by ID
func (q *Queries) GetStrainByID(ctx context.Context, id int64) (*Strain, error) {
	row := q.db.QueryRowContext(ctx, getStrainByID, id)
	var i Strain
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Type,
		&i.YieldAverage,
		&i.TerpAverageTotal,
		&i.Terp1,
		&i.Terp1Value,
		&i.Terp2,
		&i.Terp2Value,
		&i.Terp3,
		&i.Terp3Value,
		&i.Terp4,
		&i.Terp4Value,
		&i.Terp5,
		&i.Terp5Value,
		&i.ThcAverage,
		&i.TotalCannabinoidAverage,
		&i.LightDep2022,
		&i.FallHarvest2022,
		&i.QuantityAvailable,
	)
	return &i, err
}

const getStrainByName = `-- name: GetStrainByName :one
SELECT id, created_at, updated_at, name, type, yield_average, terp_average_total, terp_1, terp_1_value, terp_2, terp_2_value, terp_3, terp_3_value, terp_4, terp_4_value, terp_5, terp_5_value, thc_average, total_cannabinoid_average, light_dep_2022, fall_harvest_2022, quantity_available
FROM strains
WHERE name ILIKE $1
LIMIT 1
`

// description: Get a strain by name
func (q *Queries) GetStrainByName(ctx context.Context, name string) (*Strain, error) {
	row := q.db.QueryRowContext(ctx, getStrainByName, name)
	var i Strain
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Type,
		&i.YieldAverage,
		&i.TerpAverageTotal,
		&i.Terp1,
		&i.Terp1Value,
		&i.Terp2,
		&i.Terp2Value,
		&i.Terp3,
		&i.Terp3Value,
		&i.Terp4,
		&i.Terp4Value,
		&i.Terp5,
		&i.Terp5Value,
		&i.ThcAverage,
		&i.TotalCannabinoidAverage,
		&i.LightDep2022,
		&i.FallHarvest2022,
		&i.QuantityAvailable,
	)
	return &i, err
}

const listStrains = `-- name: ListStrains :many
SELECT id, created_at, updated_at, name, type, yield_average, terp_average_total, terp_1, terp_1_value, terp_2, terp_2_value, terp_3, terp_3_value, terp_4, terp_4_value, terp_5, terp_5_value, thc_average, total_cannabinoid_average, light_dep_2022, fall_harvest_2022, quantity_available
FROM strains
ORDER BY name
`

// description: List all strains
func (q *Queries) ListStrains(ctx context.Context) ([]*Strain, error) {
	rows, err := q.db.QueryContext(ctx, listStrains)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Strain{}
	for rows.Next() {
		var i Strain
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Type,
			&i.YieldAverage,
			&i.TerpAverageTotal,
			&i.Terp1,
			&i.Terp1Value,
			&i.Terp2,
			&i.Terp2Value,
			&i.Terp3,
			&i.Terp3Value,
			&i.Terp4,
			&i.Terp4Value,
			&i.Terp5,
			&i.Terp5Value,
			&i.ThcAverage,
			&i.TotalCannabinoidAverage,
			&i.LightDep2022,
			&i.FallHarvest2022,
			&i.QuantityAvailable,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateStrain = `-- name: UpdateStrain :one
UPDATE strains
SET name                      = COALESCE($1, name),
    type                      = COALESCE($2, type),
    yield_average             = COALESCE($3, yield_average),
    terp_average_total        = COALESCE($4, terp_average_total),
    terp_1                    = COALESCE($5, terp_1),
    terp_1_value              = COALESCE($6, terp_1_value),
    terp_2                    = COALESCE($7, terp_2),
    terp_2_value              = COALESCE($8, terp_2_value),
    terp_3                    = COALESCE($9, terp_3),
    terp_3_value              = COALESCE($10, terp_3_value),
    terp_4                    = COALESCE($11, terp_4),
    terp_4_value              = COALESCE($12, terp_4_value),
    terp_5                    = COALESCE($13, terp_5),
    terp_5_value              = COALESCE($14, terp_5_value),
    thc_average               = COALESCE($15, thc_average),
    total_cannabinoid_average = COALESCE($16, total_cannabinoid_average),
    light_dep_2022            = COALESCE($17, light_dep_2022),
    fall_harvest_2022         = COALESCE($18, fall_harvest_2022),
    quantity_available        = COALESCE($19, quantity_available)
WHERE id = $20
RETURNING id, created_at, updated_at, name, type, yield_average, terp_average_total, terp_1, terp_1_value, terp_2, terp_2_value, terp_3, terp_3_value, terp_4, terp_4_value, terp_5, terp_5_value, thc_average, total_cannabinoid_average, light_dep_2022, fall_harvest_2022, quantity_available
`

type UpdateStrainParams struct {
	Name                    nulls.String        `json:"name"`
	Type                    nulls.String        `json:"type"`
	YieldAverage            decimal.NullDecimal `json:"yield_average"`
	TerpAverageTotal        decimal.NullDecimal `json:"terp_average_total"`
	Terp1                   nulls.String        `json:"terp_1"`
	Terp1Value              decimal.NullDecimal `json:"terp_1_value"`
	Terp2                   nulls.String        `json:"terp_2"`
	Terp2Value              decimal.NullDecimal `json:"terp_2_value"`
	Terp3                   nulls.String        `json:"terp_3"`
	Terp3Value              decimal.NullDecimal `json:"terp_3_value"`
	Terp4                   nulls.String        `json:"terp_4"`
	Terp4Value              decimal.NullDecimal `json:"terp_4_value"`
	Terp5                   nulls.String        `json:"terp_5"`
	Terp5Value              decimal.NullDecimal `json:"terp_5_value"`
	ThcAverage              decimal.NullDecimal `json:"thc_average"`
	TotalCannabinoidAverage decimal.NullDecimal `json:"total_cannabinoid_average"`
	LightDep2022            nulls.String        `json:"light_dep_2022"`
	FallHarvest2022         nulls.String        `json:"fall_harvest_2022"`
	QuantityAvailable       decimal.NullDecimal `json:"quantity_available"`
	ID                      int64               `json:"id"`
}

// description: Update a strain
func (q *Queries) UpdateStrain(ctx context.Context, arg *UpdateStrainParams) (*Strain, error) {
	row := q.db.QueryRowContext(ctx, updateStrain,
		arg.Name,
		arg.Type,
		arg.YieldAverage,
		arg.TerpAverageTotal,
		arg.Terp1,
		arg.Terp1Value,
		arg.Terp2,
		arg.Terp2Value,
		arg.Terp3,
		arg.Terp3Value,
		arg.Terp4,
		arg.Terp4Value,
		arg.Terp5,
		arg.Terp5Value,
		arg.ThcAverage,
		arg.TotalCannabinoidAverage,
		arg.LightDep2022,
		arg.FallHarvest2022,
		arg.QuantityAvailable,
		arg.ID,
	)
	var i Strain
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Type,
		&i.YieldAverage,
		&i.TerpAverageTotal,
		&i.Terp1,
		&i.Terp1Value,
		&i.Terp2,
		&i.Terp2Value,
		&i.Terp3,
		&i.Terp3Value,
		&i.Terp4,
		&i.Terp4Value,
		&i.Terp5,
		&i.Terp5Value,
		&i.ThcAverage,
		&i.TotalCannabinoidAverage,
		&i.LightDep2022,
		&i.FallHarvest2022,
		&i.QuantityAvailable,
	)
	return &i, err
}
