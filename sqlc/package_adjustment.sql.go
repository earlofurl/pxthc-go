// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: package_adjustment.sql

package sqlc

import (
	"context"

	"github.com/shopspring/decimal"
)

const createPackageAdjustment = `-- name: CreatePackageAdjustment :one
INSERT INTO package_adjustments (from_package_id,
                                 to_package_id,
                                 amount,
                                 uom_id)
VALUES ($1, $2, $3, $4)
RETURNING id, created_at, updated_at, from_package_id, to_package_id, amount, uom_id
`

type CreatePackageAdjustmentParams struct {
	FromPackageID int64           `json:"from_package_id"`
	ToPackageID   int64           `json:"to_package_id"`
	Amount        decimal.Decimal `json:"amount"`
	UomID         int64           `json:"uom_id"`
}

// description: Create a package adjustment
func (q *Queries) CreatePackageAdjustment(ctx context.Context, arg *CreatePackageAdjustmentParams) (*PackageAdjustment, error) {
	row := q.db.QueryRowContext(ctx, createPackageAdjustment,
		arg.FromPackageID,
		arg.ToPackageID,
		arg.Amount,
		arg.UomID,
	)
	var i PackageAdjustment
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FromPackageID,
		&i.ToPackageID,
		&i.Amount,
		&i.UomID,
	)
	return &i, err
}

const getPackageAdjustment = `-- name: GetPackageAdjustment :one
SELECT id, created_at, updated_at, from_package_id, to_package_id, amount, uom_id
FROM package_adjustments
WHERE id = $1
LIMIT 1
`

// description: Get a package adjustment by id
func (q *Queries) GetPackageAdjustment(ctx context.Context, id int64) (*PackageAdjustment, error) {
	row := q.db.QueryRowContext(ctx, getPackageAdjustment, id)
	var i PackageAdjustment
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FromPackageID,
		&i.ToPackageID,
		&i.Amount,
		&i.UomID,
	)
	return &i, err
}

const listPackageAdjustments = `-- name: ListPackageAdjustments :many
SELECT id, created_at, updated_at, from_package_id, to_package_id, amount, uom_id
FROM package_adjustments
WHERE from_package_id = $1
   OR to_package_id = $2
ORDER BY id
LIMIT $3 OFFSET $4
`

type ListPackageAdjustmentsParams struct {
	FromPackageID int64 `json:"from_package_id"`
	ToPackageID   int64 `json:"to_package_id"`
	Limit         int32 `json:"limit"`
	Offset        int32 `json:"offset"`
}

// description: List package adjustments
func (q *Queries) ListPackageAdjustments(ctx context.Context, arg *ListPackageAdjustmentsParams) ([]*PackageAdjustment, error) {
	rows, err := q.db.QueryContext(ctx, listPackageAdjustments,
		arg.FromPackageID,
		arg.ToPackageID,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*PackageAdjustment{}
	for rows.Next() {
		var i PackageAdjustment
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.FromPackageID,
			&i.ToPackageID,
			&i.Amount,
			&i.UomID,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
